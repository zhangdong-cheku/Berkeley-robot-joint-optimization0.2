// ============================================================================
// 文件：ble_handler.h
// 功能：BLE通信处理模块头文件
// 说明：定义BLE通信相关的常量、数据结构、函数接口和全局变量
// ============================================================================

// ============================================================================
// 头文件保护宏
// 功能：防止头文件被重复包含
// ============================================================================
#ifndef BLE_HANDLER_H
#define BLE_HANDLER_H

// ============================================================================
// 库文件包含
// 说明：使用ESP32内置BLE库替代NimBLE库
// ============================================================================
#include <BLEDevice.h>    //!< BLE设备管理库
#include <BLEUtils.h>     //!< BLE工具库
#include <BLEScan.h>      //!< BLE扫描库
#include <string>         //!< C++字符串库

// ============================================================================
// 设备配置常量定义
// ============================================================================

// ============================================================================
// 数据缩放系数（根据实际需求调整）
// 说明：用于浮点数与16位整数之间的转换，优化数据传输效率
// ============================================================================
#define ANGLE_SCALE 10.0f      //!< 角度缩放系数 - 角度值乘以该系数转换为整数
#define VELOCITY_SCALE 10.0f   //!< 速度缩放系数 - 速度值乘以该系数转换为整数

// ============================================================================
// 数据包类型定义
// 说明：定义不同的BLE通信协议包类型
// ============================================================================
#define PACKET_TYPE_SINGLE 0x01       //!< 单电机控制包 - 针对单个电机的控制指令
#define PACKET_TYPE_MULTI  0x02       //!< 多电机批量控制包 - 批量控制多个电机
#define PACKET_TYPE_MULTI_STRUCT 0x03 //!< 多电机结构体包 - 灵活的设备ID-数值配对控制

// ============================================================================
// 数据类型定义
// 说明：定义不同的控制数据类型
// ============================================================================
#define DATA_TYPE_ANGLE    0x01       //!< 角度控制 - 位置环控制指令
#define DATA_TYPE_VELOCITY 0x02       //!< 速度控制 - 速度环控制指令
#define DATA_TYPE_CURRENT  0x03       //!< 电流控制 - 电流环控制指令

// ============================================================================
// 调试开关
// 说明：控制BLE调试信息的输出
// ============================================================================
#define BLE_DEBUG 0                   //!< 调试开关：设为1启用调试输出，0禁用

// ============================================================================
// 减速器减速比（注释掉的配置项，可根据需要启用）
// ============================================================================

// ============================================================================
// 全局变量声明（在Ble_Handler.cpp中定义）
// ============================================================================

// 电机控制相关全局变量
extern float ble_motor_target;        //!< 当前电机的目标值（转换后的float）
extern bool new_command;             //!< 新命令标志 - 表示有新控制指令需要处理
extern uint8_t data_scale_type;       //!< 数据类型标识（0=角度，1=速度，2=电流）
extern uint8_t my_device_id;          //!< 当前设备ID（缓存） - 用于多设备系统区分

// BLE服务器相关全局变量
extern bool deviceConnected;          //!< 当前设备连接状态
extern bool oldDeviceConnected;       //!< 前次设备连接状态 - 用于状态变化检测
extern BLEServer* pServer;            //!< BLE服务器对象指针
extern BLEService* pService;          //!< BLE服务对象指针
extern BLECharacteristic* pTxCharacteristic;  //!< 发送特征值对象指针
extern BLECharacteristic* pRxCharacteristic;  //!< 接收特征值对象指针

// ============================================================================
// 函数声明
// ============================================================================

// ============================================================================
// 函数：initBLEServer
// 功能：初始化BLE服务器
// 说明：创建BLE服务、特征值，并开始广播
// ============================================================================
void initBLEServer();

// ============================================================================
// 函数：BLE_Server_Loop
// 功能：BLE服务器主循环处理函数
// 说明：需要在主循环中定期调用，处理连接状态和发送心跳包
// ============================================================================
void BLE_Server_Loop();

// ============================================================================
// 函数：parseDirectCommandData
// 功能：解析直接命令数据包
// 参数：data - 接收到的原始数据包
// 说明：支持多种数据包格式，包括单电机控制、多电机批量控制等
// ============================================================================
void parseDirectCommandData(const std::string& data);

// ============================================================================
// 函数：getMyDeviceID
// 功能：获取本设备ID
// 返回值：本设备的唯一标识符
// 说明：用于多设备系统中区分不同电机控制器
// ============================================================================
uint8_t getMyDeviceID();

// ============================================================================
// 函数：floatToInt16
// 功能：浮点数转换为16位整数（带缩放）
// 参数：value - 输入浮点数值，scale - 缩放系数
// 返回值：缩放后的16位整数值
// 说明：用于数据压缩传输，支持溢出保护
// ============================================================================
int16_t floatToInt16(float value, float scale);

// ============================================================================
// 函数：int16ToFloat
// 功能：16位整数转换为浮点数（带缩放）
// 参数：value - 输入16位整数值，scale - 缩放系数
// 返回值：缩放后的浮点数值
// 说明：用于数据解压缩，还原原始浮点数值
// ============================================================================
float int16ToFloat(int16_t value, float scale);

// ============================================================================
// 函数：bleDebugPrint
// 功能：BLE调试信息输出函数
// 参数：message - 要输出的调试信息
// 说明：根据BLE_DEBUG宏控制是否输出调试信息
// ============================================================================
void bleDebugPrint(const char* message);

// ============================================================================
// 函数：sendBLEResponse
// 功能：发送BLE响应数据
// 参数：response - 要发送的响应字符串
// 说明：向连接的客户端发送确认响应或状态信息
// ============================================================================
void sendBLEResponse(const char* response);

// ============================================================================
// 系统配置常量
// ============================================================================
#define MAX_MOTORS 20           //!< 最大电机数量（1..MAX_MOTORS） - 系统支持的最大电机数量
#define MY_DEVICE_ID 6          //!< 当前设备ID (1..MAX_MOTORS) - 本设备的唯一标识符

// ============================================================================
// 数据结构定义：MultiStructParsed
// 功能：存储MULTI_STRUCT数据包解析结果的结构体
// 说明：当接收到MULTI_STRUCT包并匹配到本设备ID时填充此结构体
// ============================================================================
typedef struct {
    uint8_t packet_type;        //!< 包类型 - 数据包的类型标识
    uint8_t device_id;          //!< 设备ID - 目标设备的标识符
    uint8_t data_type;          //!< 数据类型 - 控制指令的类型（角度/速度/电流）
    int16_t raw_value;          //!< 原始值 - 从数据包中解析出的原始16位整数值
    float   scaled_value;       //!< 缩放值 - 转换为浮点数后的实际控制值
    uint8_t count;              //!< 条目数 - MULTI_STRUCT包内包含的设备条目数量
} MultiStructParsed;

// ============================================================================
// 全局结构体变量声明
// 功能：保存最近一次MULTI_STRUCT解析结果
// ============================================================================
extern MultiStructParsed last_multi_struct_cmd;

// ============================================================================
// 头文件保护宏结束
// ============================================================================
#endif // BLE_HANDLER_H
