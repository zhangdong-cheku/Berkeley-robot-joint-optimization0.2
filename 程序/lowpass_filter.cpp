#include "lowpass_filter.h"

// ============================================================================
// 构造函数：LowPassFilter
// 功能：初始化低通滤波器对象
// 参数：time_constant - 滤波器时间常数（秒），决定滤波强度
// 说明：时间常数越大，滤波效果越强，响应越慢
// ============================================================================
LowPassFilter::LowPassFilter(float time_constant)
    : Tf(time_constant)      // 初始化时间常数成员变量
    , y_prev(0.0f)          // 初始化前一次输出值为0
{
    // 记录初始时间戳，用于计算时间间隔
    timestamp_prev = micros();  // 获取当前微秒时间戳
}

// ============================================================================
// 运算符重载函数：operator()
// 功能：低通滤波器的主要处理函数
// 参数：x - 当前输入信号值
// 返回值：滤波后的输出信号值
// 说明：实现一阶低通滤波算法，使用递归方式计算
// ============================================================================
float LowPassFilter::operator() (float x)
{
    // 获取当前时间戳
    unsigned long timestamp = micros();
    
    // 计算时间间隔（秒）：当前时间 - 上次时间
    float dt = (timestamp - timestamp_prev) * 1e-6f;  // 微秒转换为秒
    
    // ============================================================================
    // 异常时间间隔处理
    // 说明：防止时间间隔异常导致滤波算法不稳定
    // ============================================================================
    
    // 情况1：时间间隔为负值（时间戳溢出或异常）
    if (dt < 0.0f) {
        dt = 1e-3f;  // 设置为1毫秒，保证算法继续运行
    }
    // 情况2：时间间隔过大（超过300毫秒，可能是系统暂停或初始化）
    else if(dt > 0.3f) {
        // 重置滤波器状态，直接输出当前输入值
        y_prev = x;                    // 更新前次输出为当前输入
        timestamp_prev = timestamp;     // 更新时间戳
        return x;                       // 返回原始输入值（跳过滤波）
    }
    
    // ============================================================================
    // 一阶低通滤波算法核心
    // 公式：y(k) = α * y(k-1) + (1-α) * x(k)
    // 其中：α = Tf / (Tf + dt)
    // ============================================================================
    
    // 计算滤波系数α（平滑因子）
    // α值范围：0 < α < 1，α越大滤波效果越强
    float alpha = Tf / (Tf + dt);
    
    // 执行滤波计算：
    // 当前输出 = α × 前次输出 + (1-α) × 当前输入
    float y = alpha * y_prev + (1.0f - alpha) * x;
    
    // ============================================================================
    // 更新滤波器状态
    // ============================================================================
    
    y_prev = y;                // 保存当前输出，作为下一次的前次输出
    timestamp_prev = timestamp; // 更新时间为当前时间戳
    
    // 返回滤波后的信号值
    return y;
}