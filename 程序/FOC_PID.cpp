#include "FOC.h"

// ============================================================================
// PID参数配置函数组
// 功能：动态配置三环PID控制器的参数
// 说明：这些函数允许在运行时调整PID参数，便于系统调试和优化
// ============================================================================

// ============================================================================
// 函数：configureVelocityPID
// 功能：配置速度环PID控制器参数
// 参数：
//   P - 比例增益（决定响应速度）
//   I - 积分增益（消除稳态误差）
//   D - 微分增益（抑制超调和振荡）
//   ramp - 输出变化率限制（防止输出突变）
//   limit - 输出限幅值（保护系统安全）
// 说明：速度环是中间控制环，负责将位置环输出转换为电流环参考
// ============================================================================
void configureVelocityPID(float P, float I, float D, float ramp, float limit) {
    vel_loop_M0.P = P;              // 设置比例增益
    vel_loop_M0.I = I;              // 设置积分增益
    vel_loop_M0.D = D;              // 设置微分增益
    vel_loop_M0.output_ramp = ramp; // 设置输出变化率限制
    vel_loop_M0.limit = limit;      // 设置输出限幅值
}

// ============================================================================
// 函数：configureAnglePID
// 功能：配置位置环PID控制器参数
// 参数：
//   P - 比例增益（位置跟踪精度）
//   I - 积分增益（消除位置稳态误差）
//   D - 微分增益（提高位置响应稳定性）
//   ramp - 输出变化率限制（平滑速度指令）
//   limit - 输出限幅值（限制最大速度）
// 说明：位置环是最外环，负责将位置误差转换为速度参考指令
// ============================================================================
void configureAnglePID(float P, float I, float D, float ramp, float limit) {
    angle_loop_M0.P = P;              // 设置比例增益
    angle_loop_M0.I = I;              // 设置积分增益
    angle_loop_M0.D = D;              // 设置微分增益
    angle_loop_M0.output_ramp = ramp; // 设置输出变化率限制
    angle_loop_M0.limit = limit;      // 设置输出限幅值
}

// ============================================================================
// 函数：configureCurrentPID
// 功能：配置电流环PID控制器参数
// 参数：
//   P - 比例增益（电流响应速度）
//   I - 积分增益（消除电流跟踪误差）
//   D - 微分增益（抑制电流振荡）
//   ramp - 输出变化率限制（平滑电压输出）
// 说明：电流环是最内环，响应最快，负责精确控制电机力矩
// ============================================================================
void configureCurrentPID(float P, float I, float D, float ramp) {
    current_loop_M0.P = P;              // 设置比例增益
    current_loop_M0.I = I;              // 设置积分增益
    current_loop_M0.D = D;              // 设置微分增益
    current_loop_M0.output_ramp = ramp; // 设置输出变化率限制
    // 注意：电流环的limit在FOC_Globals.cpp中已固定设置为12.6
}

// ============================================================================
// PID计算接口函数组
// 功能：提供统一的PID计算接口，封装底层PID对象调用
// 说明：这些函数简化了PID控制器的使用，提供清晰的错误输入接口
// ============================================================================

// ============================================================================
// 函数：calculateVelocityPID
// 功能：计算速度环PID输出
// 参数：error - 速度误差（目标速度 - 实际速度）
// 返回值：PID计算后的速度控制量
// 说明：将速度误差转换为电流环的参考指令
// ============================================================================
float calculateVelocityPID(float error) {
    // 调用速度环PID对象的运算符重载函数进行计算
    return vel_loop_M0(error);
}

// ============================================================================
// 函数：calculateAnglePID
// 功能：计算位置环PID输出
// 参数：error - 位置误差（目标位置 - 实际位置）
// 返回值：PID计算后的位置控制量（速度参考）
// 说明：将位置误差转换为速度环的参考指令
// ============================================================================
float calculateAnglePID(float error) {
    // 调用位置环PID对象的运算符重载函数进行计算
    return angle_loop_M0(error);
}

// ============================================================================
// 注意：电流环PID计算直接通过current_loop_M0对象调用
// 在setMotorTorque函数中直接使用：current_loop_M0(Target - getMotorCurrent())
// 这是因为电流环作为最内环，其接口更为直接和底层
// ============================================================================