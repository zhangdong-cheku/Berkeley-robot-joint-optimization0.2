// ============================================================================
// 头文件保护宏：防止重复包含
// ============================================================================
#ifndef PID_H
#define PID_H

// ============================================================================
// 类定义：PIDController
// 功能：PID控制器类，实现比例-积分-微分控制算法
// 说明：用于FOC系统中的电流环、速度环和位置环控制
// ============================================================================
class PIDController
{
public:
    // ============================================================================
    // 构造函数：PIDController
    // 功能：创建PID控制器对象并初始化参数
    // 参数：
    //   P - 比例增益系数
    //   I - 积分增益系数
    //   D - 微分增益系数
    //   ramp - 输出变化率限制（加速度限制）
    //   limit - 输出幅值限制
    // 说明：支持参数化初始化，便于创建不同特性的PID控制器
    // ============================================================================
    PIDController(float P, float I, float D, float ramp, float limit);
    
    // ============================================================================
    // 析构函数：~PIDController
    // 功能：默认析构函数，自动释放资源
    // 说明：使用默认实现，无需特殊清理操作
    // ============================================================================
    ~PIDController() = default;

    // ============================================================================
    // 运算符重载函数：operator()
    // 功能：PID控制器的主要计算接口
    // 参数：error - 当前控制误差（目标值 - 实际值）
    // 返回值：PID控制器的输出值
    // 说明：实现函数对象模式，使PID控制器可以像函数一样调用
    // ============================================================================
    float operator() (float error);

    // ============================================================================
    // 公共成员变量：PID参数和限制
    // ============================================================================
    
    float P; //!< 比例增益(P环增益) - 决定系统响应速度
    float I; //!< 积分增益（I环增益） - 消除稳态误差
    float D; //!< 微分增益（D环增益） - 提高系统阻尼，抑制振荡
    
    float output_ramp; //!< 输出变化率限制 - 限制PID输出变化速度（加速度限制）
    float limit;       //!< 输出幅值限制 - PID控制器最大输出限制

protected:
    // ============================================================================
    // 保护成员变量：控制器状态
    // 说明：这些变量记录控制器的历史状态，用于递归计算
    // ============================================================================
    
    float error_prev;        //!< 最后的跟踪误差值 - 上一次的控制误差
    float output_prev;       //!< 最后一个pid输出值 - 上一次的控制器输出
    float integral_prev;     //!< 最后一个积分分量值 - 上一次的积分项累积值
    unsigned long timestamp_prev; //!< 上次执行时间戳 - 记录上一次计算的时间（微秒）

};

// ============================================================================
// 头文件保护宏结束
// ============================================================================
#endif